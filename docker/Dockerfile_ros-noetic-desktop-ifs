# IFS-specific increment

# FROM vividlibra/px4-dev-ros-noetic-desktop:latest

FROM vividlibra/focal-px4-noetic-desktop:latest

USER root

ENV ROS_DISTRO=noetic

# Eigen3, protobuf, opencv is already installed from simulation-focal

# install vim for editing
RUN apt-get update \
    && apt-get install -y vim

# install PCL-C++
RUN apt-get update \
    && apt-get install -y libpcl-dev \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

# build and install ceres-solver from source
RUN apt-get install -y libgoogle-glog-dev libatlas-base-dev libsuitesparse-dev

COPY ./ceres-solver-2.2.0.tar.gz /tmp/ceres-solver-2.2.0.tar.gz
RUN cd /tmp \
    && tar zxf ceres-solver-2.2.0.tar.gz \
    && mkdir ceres-bin \
    && cd ceres-bin \
    && cmake ../ceres-solver-2.2.0 \
    && make -j3 \
    && make test \
    && make install \
    && cd /tmp \
    && rm -rf ceres* \
	&& apt-get -y autoremove \
	&& apt-get clean autoclean \
	&& rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*

# build and install g2o from source
RUN mkdir -p ~/temporary \ 
    && cd ~/temporary \
    && git clone https://github.com/RainerKuemmerle/g2o.git \
    && cd g2o \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make -j4 \
    && make install \
    && cd ../.. \
    && rm -rf g2o

# We don't need these as build dependencies are resolved, they are all independent
# # misc
# RUN mkdir -p ~/catkin_ws/src \
#     && cd ~/catkin_ws/src \
#     && git clone https://github.com/koide3/ndt_omp.git \
#     && git clone https://github.com/SMRT-AIST/fast_gicp.git --recursive

# # Modify CMakeLists.txt if building for ARM architecture
# # jwpark: This is a temporary workaround for the ARM architecture, https://github.com/koide3/ndt_omp/issues/15
# RUN if [ "$(uname -m)" = "aarch64" ]; then \
#         sed -i '10,11d' ~/catkin_ws/src/ndt_omp/CMakeLists.txt; \
#     fi

# # Source the ROS setup script and build the workspace
# RUN /bin/bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && cd ~/catkin_ws && catkin_make"

# setup geographiclib
RUN cd ~/temporary \
    && mkdir -p scripts \
    && cd scripts \
    && wget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh \
    && chmod +x install_geographiclib_datasets.sh \
    && ./install_geographiclib_datasets.sh \
    && cd ~ \
    && rm -rf temporary

# bootstrap rosdep
RUN rosdep update

# you should do both
# using x86_64 machine:
# docker buildx build --platform linux/amd64 -t vividlibra/focal-px4-noetic-desktop-ifs:amd64 -f Dockerfile_ros-noetic-desktop-ifs --push .
# using arm64 machine:
# docker buildx build --platform linux/arm64 -t vividlibra/focal-px4-noetic-desktop-ifs:arm64 -f Dockerfile_ros-noetic-desktop-ifs --push .